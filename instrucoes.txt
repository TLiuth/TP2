A ISA possui as seguintes instruções:

Considere que cada linha de comando é formada por 4 bytes, estruturados da seguinte maneira:

[ OPCODE | byte 2 | byte 3 | byte 4 ]
Ou também referenciado como:
[ OPCODE | adress1| adress2| adress3]

Todos os bytes são separados no início de cada iteração, embora não sejam usados em todas as operações

***************************************
Os comandos de manipulação das memórias:

1  [ STRS | ] Armazena no adress1 o valor DE adress2
2  [ STHR | ] Armazena no adress1 o valor em holder
3  [ STME | ] Guarda na memória do adress3 (MEMÓRIA) o valor em adress1 (REGISTRADOR)
4  [ GETR | ] Carrega para o holder o valor em adress1 (REGISTRADOR) #Provavelmente não será necessário
5  [ LOAD | ] Carrega da memória para o adress3 (REGISTRADOR) o valor em adress1 (MEMÓRIA)

***************************************
Os comandos de operação aritmética:

6  [ ADD_ | ] Adiciona os valores dos endereços adress1 e adress2 (REGISTRADORES) e joga para o holder
7  [ SUB_ | ] Subtrai os valores dos endereços adress1 e adress2 (1 - 2) (REGISTRADORES) e joga para o holder
8  [ MULT | ] Multiplica os endereços adress1 e adress2 (REGISTRADORES) e joga para o holder
9  [ DIV_ | ] Divide o valor do endereço adress1 pelo de adress2 (A/B) (REGISTRADORES) e joga para o holder

***************************************
Os comandos de operações de fluxo
10 [ JUMP | ] Pula para a linha do endereço 1
11 [ JPIE | ] Pula para a linha de adress3 caso o valor adress1 seja igual ao em adress2
12 [ JPIG | ] Pula para a linha de adress3 caso o valor em adress1 seja maior que o em adress2
13 [ PRNT | ] Imprime o valor armazenado em adress1
14 [|]
15 [|]
16 [ END_ | ] Encerra todos os comandos